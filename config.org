#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :comments link
* My Emacs Configuration
this is my attempt at a home-brewed Emacs configuration taking what I've
learned from using doom Emacs exclusively for two years of
professional work

** elpaca
bootstrapping elpaca
#+begin_src emacs-lisp
  ;;bootstrap copied from instructions
  (defvar elpaca-installer-version 0.10)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src
** early init

#+begin_src emacs-lisp :tangle ./early-init.el
  ;; Package.el is not used with Elpaca
  (setq package-enable-at-startup nil)

  ;; A package loading speed hack, restored after init
  (setq file-name-handler-alist-old file-name-handler-alist)
  (setq file-name-handler-alist nil)

  ;; Use the no-littering style var directory for elisp native compile cache
  (when (fboundp 'startup-redirect-eln-cache)
    (startup-redirect-eln-cache
     (convert-standard-filename
      (expand-file-name  "var/eln-cache/" user-emacs-directory))))

  (load-theme 'modus-operandi t)
#+end_src

** performance

#+begin_src emacs-lisp


    ;; Right after Elpaca is available, we can require packages and evaluate
    ;; expressiosn after they run, and the first few packages are configuring things
    ;; that need to be set up prior to evaluating any use-package expressions or
    ;; loading and configuring packages.
    (elpaca elpaca-use-package              ; enables :elpaca keyword in use-package
      (elpaca-use-package-mode)
      (setq elpaca-use-package-by-default t))

    (elpaca no-littering
      (require 'no-littering)
      (setq custom-file (no-littering-expand-etc-file-name "custom.el")))

    (elpaca auto-compile
      (require 'auto-compile)
      ;; Don't load outdated .elc files
      (setopt load-prefer-newer t)
      (setopt auto-compile-display-buffer nil)
      ;; You will still get byte compile and you can open *Warnings* buffer
      (setopt native-comp-async-report-warnings-errors 'silent)
      (auto-compile-on-load-mode 1)
      (auto-compile-on-save-mode 1))

    (elpaca compat
      (require 'compat))


    ;; This evaluation barrier blocks so that `use-package' expressions below will
    ;; not try to use the `:elpaca' keyword before it's defined.
    (elpaca-wait)

    ;;; Built-in things

    ;; `emacs' is a pseudo-package and just tidies up configuration of things that
    ;; don't require loading
    (use-package emacs
      :ensure nil
      :config
      (save-place-mode 1) ; visit files at same position
      (delete-selection-mode -1) ; Actions on active region will delete called with 1
      (show-paren-mode 1)
      (setopt
       ;; https://www.reddit.com/r/emacs/comments/kgv4fj/problems_in_org_trello_error_requestcurlsync/
       request-backend 'url-retrieve
       frame-resize-pixelwise t
       window-resize-pixelwise t
       Info-scroll-prefer-subnodes t
       comint-scroll-to-bottom-on-input t
       delete-by-moving-to-trash t
       use-short-answers t
       create-lockfiles nil)

      (let ((emacs-backup-dir (no-littering-expand-var-file-name "backups/.saves-")))
        (setq backup-directory-alist
              `((".*" . ,emacs-backup-dir)))
        (setq auto-save-file-name-transforms
              `((".*" ,emacs-backup-dir t)))
        (setq auto-save-list-file-prefix
              emacs-backup-dir)
        (setq initial-scratch-message nil
              initial-buffer-choice (no-littering-expand-var-file-name "scratch.el")
              initial-major-mode 'emacs-lisp-mode))

      ;; ibuffer is much better than list-buffers
      (substitute-key-definition 'list-buffers 'ibuffer global-map)

      ;; Thanks Steve Purcell
      (keymap-global-set "RET" 'newline-and-indent)

      (delete-selection-mode 0) ; Actions on active region will delete
      (add-to-list 'write-file-functions 'delete-trailing-whitespace)
      (add-hook 'elpaca-after-init-hook
                `(lambda ()
                   ;; Undo the file handler trick from early-init.el
                   (setq file-name-handler-alist file-name-handler-alist-old)
                   ;; Still more memory per GC than standard, but not so much that GC
                   ;; becomes slow.
                   (setq gc-cons-threshold (* 16 1000 1000))
                   (setq gc-cons-percentage 0.1))
                t))

    (use-package gcmh
      :ensure t
      :config
      (gcmh-mode 1)
      ;; The default is 800 kilobytes.  Measured in bytes.
      ;; Profile emacs startup
      (add-hook 'emacs-startup-hook
                (lambda ()
                  (message "*** Emacs loaded in %s seconds with %d garbage collections."
                           (emacs-init-time "%.2f")
                           gcs-done))))
    ;; Always run a server if there isn't one, for any emacsclients to connect to.
    (use-package server
      :ensure nil
      :config
      (add-hook 'elpaca-after-init-hook
                (lambda ()
                  (unless (server-running-p)
                    (server-start)))))

    (use-package bookmark
      :ensure nil
      :config
      (setopt bookmark-save-flag 1)
      ;; Save bookmarks every five minutes
      (run-at-time nil (* 5 60) #'bookmark-save))

    ;; Accumulate history of buffers automatically.  Saves mental effort enormously.
    (use-package recentf
      :ensure nil
      :config
      (recentf-load-list)
      (recentf-mode 1)
      (setq recentf-max-saved-items 200)
      ;; Save recentf every five minutes
      (run-at-time nil (* 5 60) #'recentf-save-list)
      (add-hook 'kill-emacs-hook #'recentf-save-list))

    ;; See yasnippet's config and snippet in
    ;; ~/.emacs.d/etc/yasnippet/emacs-lisp-mode/package
    (use-package autoinsert
      :ensure nil
      :config
      (setq auto-insert-query nil)
      (setq auto-insert-alist
            `((emacs-lisp-mode . (lambda ()
                                   (require 'yasnippet)
                                   (insert "<p")
                                   (call-interactively #'yas-expand)))
              (csharp-mode . (lambda ()
                               (require 'yasnippet)
                               (if (string-match-p "I[A-Z].*\\.cs$" (buffer-name))
                                   (insert "<i")
                                 (insert "<"
                                         (completing-read "Type (c)lass/(r)ecord: " '("c" "r") nil t)))
                               (call-interactively #'yas-expand)))))
      (auto-insert-mode t))

    (use-package savehist
      :ensure nil
      :init (savehist-mode t))

    (use-package s
      :ensure t
      :demand t)

    (use-package transient
      :ensure t
      :demand t
      :after compat
      :bind(( "C-c '" . #'my/lsp-transient)))
    (elpaca-wait)
#+end_src

#+RESULTS:
| (lambda nil (message *** Emacs loaded in %s seconds with %d garbage collections. (emacs-init-time %.2f) gcs-done)) | #[0 \301!\210eb\210\302 \210\303\304!\207 [dashboard-buffer-name switch-to-buffer redisplay run-hooks dashboard-after-initialize-hook] 2] | (closure (t) nil (message *** Emacs loaded in %s seconds with %d garbage collections. (emacs-init-time %.2f) gcs-done)) |

** allow themes and babel blocks
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-return-follow-link t)
#+end_src

#+RESULTS:
: t


** Native compilation

#+begin_src emacs-lisp
  ;; Silence compiler warnings as they can be pretty disruptive
  ;; (setq native-comp-async-report-warnings-errors nil)

  ;; Set the right directory to store the native comp cache
  ;; (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src

#+RESULTS:
| /home/karim/.cache/emacs/eln-cache/ | /home/karim/.emacs.d/eln-cache/ | /home/karim/.guix-profile/lib/emacs/native-site-lisp | /gnu/store/3bsvi1gvbacnpbxrv6v1334d2d256766-emacs-29.3/lib/emacs/29.3/native-lisp/ |
** Adding sources for packages
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")))
  (setq use-package-always-ensure t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
#+end_src

#+RESULTS:


** Package Management

** org babel
#+begin_src emacs-lisp :noweb yes
  (use-package ob-powershell
    :ensure (ob-powershell :type git
                           :host github
                           :repo "rkiggen/ob-powershell")
    :after org)
  (use-package ob-fsharp
    :after org)
  (use-package ob-restclient
    :after org)

  (use-package ob-csharp
    :ensure (ob-csharp :type git
                       :host github
                       :repo "samwdp/ob-csharp"))

  (use-package ob-http
    :ensure (ob-http :type git
                     :host github
                     :repo "zweifisch/ob-http")
    :after org
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     (quote (
             (shell . t)
             (python . t)
             (ditaa . t)
             (gnuplot . t)
             (fsharp . t)
             (restclient . t)
             (powershell . t)
             (csharp . t)
             (http . t)))))
#+end_src

** formatting
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq-default require-final-newline nil)
  (setq-default mode-require-final-newline nil)
  (setq c-require-final-newline '((c-mode . nil) (c++-mode . nil) (objc-mode . nil)))
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (global-auto-revert-mode 1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  ;; (set-face-attribute 'default nil :font "Fira Code-16")

  (setq-default major-mode
                (lambda () ; guess major mode from file name
                  (unless buffer-file-name
                    (let ((buffer-file-name (buffer-name)))
                      (set-auto-mode)))))

  (setq confirm-kill-emacs #'yes-or-no-p)

  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "C-c l") #'org-store-link)


  (setq compilation-ask-about-save nil)
#+end_src

** Behaviour
#+begin_src emacs-lisp
  (setq-default abbrev-mode t)
  (setf recentf-mode t)
#+end_src

** eshell
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :after eshell
    :init
    (add-to-list 'eshell-path-env-list "~/.local/bin/"))
#+end_src
* packages
** Load custom lisp
I've got a folder of custom Emacs Lisp libraries which must be added to the load path.
#+begin_src emacs-lisp
  ;; Add my library path to load-path
  (push "~/.emacs.d/lisp" load-path)
  (push "~/.emacs.d/lisp/azure-devops" load-path)
#+end_src

#+RESULTS:

** Dashboard
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package dashboard
    :config
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-set-heading-icons t))
#+end_src

#+RESULTS:
: t
** Keybinding Panel (which-key)

[[https://github.com/justbur/emacs-which-key][which-key]] is great for getting an overview of what keybindings are available
based on the prefix keys you entered.  Learned about this one from Spacemacs.

#+begin_src emacs-lisp
  (use-package diminish)
  (use-package which-key
    :config
    (diminish 'which-key-mode)
    (which-key-mode)
    (setq which-key-idle-delay 0.3))
#+end_src
** Doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (doom-modeline-mode 1)
    (setf doom-modeline-icon t))
#+end_src

#+RESULTS:
: t
** Winner-mode
#+begin_src emacs-lisp
  (setf winner-mode 1)

  (use-package nerd-icons
    :ensure t)
  (use-package nerd-icons-completion
    :ensure t
    :after marginalia
    :config
    (nerd-icons-completion-marginalia-setup)
    (nerd-icons-completion-mode 1))
#+end_src
** Version control
[[https://magit.vc/][Magit]] is one of emacs best features. It's been around forever at it has truly helped me understand the intricasies of git.

if this isn't you cup of tea and you're on windows or mac, then I
highly recommend [[https://magit.vc/][Fork]]

It might be hard to imagine, but having your source control directly
where you browse code is immennsely freeing and you don't break you
flow as much. On top of that you have all of your code search,
navigation etc. available since you're in your editor.
#+begin_src emacs-lisp
  (use-package magit
    :config
    (setf magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1
          magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1
          magit-save-repository-buffers 'dontask
          ediff-window-setup-function 'ediff-setup-windows-plain)
    :bind (("C-c v" . #'my-git-commands)))

  (use-package magit-todos)

  (use-package conventional-commit
    :ensure (conventional-commit
             :type git
             :host github
             :repo "akirak/conventional-commit.el")
    :hook (git-commit-mode . conventional-commit-setup))

  (use-package git-timemachine
    :ensure t)

  (use-package git-cliff
    :config
    (setf git-cliff-executable "~/.cargo/bin/git-cliff"))

  (transient-define-prefix my-git-commands ()
    "A transient for common git operations."
    ["Git Commands"
     ["Magit"
      ("g" "Status" magit-status)
      ("b" "blame" magit-blame-addition)
      ("C" "Clone" magit-clone)
      ]
     ["Timemachine"
      ("t" "Toggle Timemachine" git-timemachine-toggle)]])
#+end_src

** Puni (structural editing - sexp / balanced expressions)
#+begin_src emacs-lisp
  ;; Install and configure Puni
  (use-package puni
    :init
    ;; Enable puni-mode globally
    (puni-global-mode)
    :config
    ;; Define keybindings similar to Paredit
    (define-key puni-mode-map (kbd "C-k") 'puni-kill-line)
    (define-key puni-mode-map (kbd "M-(") 'puni-wrap-round)
    (define-key puni-mode-map (kbd "M-[") 'puni-wrap-square)
    (define-key puni-mode-map (kbd "M-{") 'puni-wrap-curly)
    (define-key puni-mode-map (kbd "M-s") 'puni-splice)
    (define-key puni-mode-map (kbd "M-S") 'puni-split)
    (define-key puni-mode-map (kbd "M-J") 'puni-join)
    (define-key puni-mode-map (kbd "M-r") 'puni-raise)
    (define-key puni-mode-map (kbd "C-)") 'puni-slurp-forward)
    (define-key puni-mode-map (kbd "C-(") 'puni-slurp-backward)
    (define-key puni-mode-map (kbd "C-}") 'puni-barf-forward)
    (define-key puni-mode-map (kbd "C-{") 'puni-barf-backward))

  ;; Optionally, disable Puni in term-mode
  ;;(add-hook 'term-mode-hook #'puni-disable-puni-mode)
#+end_src

** completion
#+begin_src emacs-lisp

  (use-package vertico
    :config
    (vertico-mode))

  (use-package consult
    :bind (([remap switch-to-buffer] . consult-buffer)
           ([remap project-find-regexp] . consult-ripgrep)
           ([remap imenu] . consult-imenu))
    :after vertico)

  (use-package vertico-prescient
    :after prescient
    :config
    (vertico-prescient-mode t))

    ;;; Completion at point

  (use-package corfu
    :config
    (setopt corfu-cycle t)
    (setopt corfu-auto t)
    (setopt corfu-separator ?\s)          ; ?\s is " "
    (setopt tab-always-indent 'complete)
    (setopt corfu-min-width 30)
    (setopt completion-ignore-case t)
    (keymap-set corfu-map "RET" nil) ; aborts after newline
    (global-corfu-mode 1))

  (use-package cape
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block))

  (use-package consult-lsp
    :ensure t)

  (use-package consult-flycheck
    :ensure t)

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((csharp-mode . lsp-deferred)
           ;; (fsharp-mode . lsp-deferred)
           )
    :bind ((:map lsp-mode-map
                 ("S-M-SPC" . #'lsp-signature-activate)))
    :config
    (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols)
    (setq lsp-prefer-capf t)
    (transient-define-prefix my/lsp-transient ()
      "LSP commands"
      [["Actions"
        ("d" "Definition" lsp-find-definition)
        ("?" "References" lsp-find-references)
        ("i" "Implementation" lsp-find-implementation)
        ("t" "Type Definition" lsp-find-type-definition)
        ("s" "Symbol" consult-lsp-symbols)
        ("f" "Format Buffer" lsp-format-buffer)
        ("a" "Code Action" lsp-execute-code-action)]
       ["Diagnostics"
        ("n" "Next Diagnostic" flycheck-next-error)
        ("p" "Previous Diagnostic" flycheck-previous-error)
        ("l" "List Diagnostics" consult-flymake)]
       ["Workspace"
        ("R" "Restart Workspace" lsp-restart-workspace)
        ("q" "Shutdown Workspace" lsp-shutdown-workspace)
        ("r" "Rename Symbol" lsp-rename)]
       ["Other"
        ("m" "Toggle LSP Mode" lsp-mode)]]))


  ;; Make sure orderless works well with LSP
  (use-package orderless
    :config
    (setopt completion-styles '(orderless basic))
    (setopt completion-category-overrides '((file (styles basic partial-completion)))))
  (use-package sly
    :ensure t)

  (use-package sharper
    :bind (("C-c d" . #'sharper-main-transient)))

  (use-package fsharp-mode)
  (add-hook 'web-mode-hook 'my-web-mode-hook)
  (add-hook 'eglot-managed-mode-hook (lambda () (+lsp-optimization-mode t)))

  ;; SLIME-Cape integration
  (use-package yasnippet-capf
    :ensure t
    :after (cape yasnippet)
    :config
    (add-to-list 'completion-at-point-functions #'yasnippet-capf))

  ;; Configure hippie-expand with YASnippet
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1)
    (add-to-list 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
    (setq hippie-expand-try-functions-list
          (cons 'yas-hippie-try-expand
                (delq 'yas-hippie-try-expand hippie-expand-try-functions-list))))

  (use-package yasnippet-snippets
    :after yasnippet)
  ;; Dabbrev configuration
  (use-package dabbrev
    :ensure nil  ; built-in package
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
    :bind ([remap dabbrev-expand] . hippie-expand))
#+end_src

#+RESULTS:
: hippie-expand

** flycheck
#+begin_src emacs-lisp
  (use-package flycheck)
#+end_src

#+RESULTS:
: t

** Transient keybinds
keybinding maps like magit

#+begin_src emacs-lisp
  ;; (transient-define-prefix my-code-transient ()
  ;;   "Window Movement"
  ;;   [["Actions"
  ;;     ("a" "Code-actions" eglot-code-actions)
  ;;     ("r" "Rename" eglot-rename)
  ;;     ("s" "Eglot Symbols" consult-eglot-symbols)
  ;;     ("f" "Format buffer" eglot-format-buffer)]
  ;;    ["Navigation"
  ;;     ("i" "Find implementation" eglot-find-implementation)
  ;;     ("d" "Find declaration" eglot-find-declaration)
  ;;     ("x" "show errors in active buffers" consult-flymake)]])
#+end_src

** ekg
#+begin_src emacs-lisp
    (use-package ekg)
#+end_src

#+RESULTS:
: [nil 26594 47914 121534 nil elpaca-process-queues nil nil 271000 nil]

** tabspaces
like perps-mode, perps.el and perspective.el but simpler and utilizing the built in tab-bar-mode
#+begin_src emacs-lisp
  (use-package tabspaces
    :config
    (setf tabspaces-default-tab "Default"
          tabspaces-remove-to-default t
          tabspaces-include-buffers '("*scratch*")
          tabspaces-initialize-project-with-todo t
          tabspaces-todo-file-name "project-todo.org"
          tabspaces-session t)
    ;; Filter Buffers for Consult-Buffer
    (tabspaces-mode 1)
    (with-eval-after-load 'consult
      ;; hide full buffer list (still available with "b" prefix)
      (consult-customize consult--source-buffer :hidden t :default nil)
      ;; set consult-workspace buffer list
      (defvar consult--source-workspace
        (list :name     "Workspace Buffers"
              :narrow   ?w
              :history  'buffer-name-history
              :category 'buffer
              :state    #'consult--buffer-state
              :default  t
              :items    (lambda () (consult--buffer-query
                                    :predicate #'tabspaces--local-buffer-p
                                    :sort 'visibility
                                    :as #'buffer-name)))

        "Set workspace buffer list for consult-buffer.")

      (add-to-list 'consult-buffer-sources 'consult--source-workspace)))

#+end_src

** Garbage Collector Magic Hack

#+begin_src emacs lisp
  (use-package gcmh)
#+end_src
** Embark

#+begin_src emacs-lisp
  (use-package embark
    :config
    (defun embark-which-key-indicator ()
      "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
      (lambda (&optional keymap targets prefix)
        (if (null keymap)
            (which-key--hide-popup-ignore-command)
          (which-key--show-keymap
           (if (eq (plist-get (car targets) :type) 'embark-become)
               "Become"
             (format "Act on %s '%s'%s"
                     (plist-get (car targets) :type)
                     (embark--truncate-target (plist-get (car targets) :target))
                     (if (cdr targets) "…" "")))
           (if prefix
               (pcase (lookup-key keymap prefix 'accept-default)
                 ((and (pred keymapp) km) km)
                 (_ (key-binding prefix 'accept-default)))
             keymap)
           nil nil t (lambda (binding)
                       (not (string-suffix-p "-argument" (cdr binding))))))))

    (setf embark-indicators
          '(embark-which-key-indicator
            embark-highlight-indicator
            embark-isearch-highlight-indicator))

    (defun embark-hide-which-key-indicator (fn &rest args)
      "Hide the which-key indicator immediately when using the completing-read prompter."
      (which-key--hide-popup-ignore-command)
      (let ((embark-indicators
             (remq #'embark-which-key-indicator embark-indicators)))
        (apply fn args)))

    (advice-add #'embark-completing-read-prompter
                :around #'embark-hide-which-key-indicator)
    :bind (("C-," . #'embark-act)
           ("C-:" . #'embark-dwim)
           ("C-h B" . #'embark-bindings))) ;;shows mode + minor key in a
  ;;searchable manner very
  ;;useful
  (use-package embark-consult)
#+end_src

** wgrep
makes grep buffers writeable.
#+begin_src emacs-lisp
  (use-package wgrep)
#+end_src
** dslides
#+begin_src emacs-lisp
  (use-package dslide
    :config
    (set-face-attribute 'dslide-highlight nil :foreground "white" :background "green")
    (set-face-attribute 'dslide-babel-success-highlight nil :foreground "white" :background "blue")
    (set-face-attribute 'dslide-babel-error-highlight nil :foreground "white" :background "red")
    )
  (use-package default-text-scale
    :ensure t
    :config
    (default-text-scale-mode))
  (use-package moc
    :ensure t)
#+end_src
some configuration for debugging slides
#+begin_src emacs-lisp

#+end_src

#+RESULTS:
** pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :hook ((pdf-view-mode . pdf-tools-enable-minor-modes)
           (pdf-view-mode . pdf-view-midnight-minor-mode)
           (pdf-view-mode . (lambda ()
                              (display-line-numbers-mode -1)
                              (set-fringe-mode 0))))
    :config
    (pdf-tools-install))
#+end_src
** Lisps

*** Emacs Lisp
#+begin_src  emacs-lisp
  ;; match da pairs
  (electric-pair-mode 1)
  (add-hook 'org-mode-hook (lambda ()
                             (setq-local electric-pair-inhibit-predicate
                                         `(lambda (c)
                                            (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

  (use-package aggressive-indent)
  ;; Enable paredit for Common Lisp programming
  (add-hook 'lisp-mode-hook #'aggressive-indent-mode)
  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
  ;; Enable paredit for Emacs Lisp programming
  (defun my-setup-check-parens ()
    "Set up check-parens, but only in =emacs-lisp-mode'."
    (when (derived-mode-p 'emacs-lisp-mode)
      (add-hook 'before-save-hook #'check-parens nil t)))

  (add-hook 'emacs-lisp-mode-hook #'my-setup-check-parens)

  (use-package eros
    :config
    (setf eros-mode 1))
#+end_src
** Common Lisp
#+begin_src emacs-lisp
  (use-package paredit
    :hook ((lisp-mode . #'enable-paredit-mode)
           (emacs-lisp-mode . #'enable-paredit-mode)))
  ;;paren files should also be lispy lisp mode (js but in lisp ma god)
  ;; (add-to-list 'auto-mode-alist (cons "\\.paren\\'" 'lisp-mode))
  ;;       (add-hook 'lisp-mode-hook
  ;;                 #'(lambda ()
  ;;                     (when (and buffer-file-name
  ;;                                (string-match-p "\\.paren\\>" buffer-file-name))
  ;;                       (unless (slime-connected-p)
  ;;                         (save-excursion (slime)))
  ;;                       (trident-mode +1))))

  ;;       (defun steal-slime-keys-for-trident! ()
  ;;       ;; Don't affect all SLIME buffers, just where invoked
  ;;       (make-local-variable 'slime-mode-map)
  ;;       (let ((map slime-mode-map))
  ;;         (define-key map (kbd "C-x C-e") nil)
  ;;         (define-key map (kbd "C-c C-r") nil)
  ;;         (define-key map (kbd "C-M-x")   nil)
  ;;         (define-key map (kbd "C-c C-k") nil)
  ;;         (define-key map (kbd "C-c C-m") nil))
  ;;       (let ((map trident-mode-map))
  ;;         (define-key map (kbd "C-x C-e") 'trident-eval-last-expression)
  ;;         (define-key map (kbd "C-c C-r") 'trident-eval-region)
  ;;         (define-key map (kbd "C-M-x")   'trident-eval-defun)
  ;;         (define-key map (kbd "C-c C-k") 'trident-eval-buffer)
  ;;         (define-key map (kbd "C-c C-m") 'trident-expand-sexp)))

  ;;     (add-hook 'trident-mode-hook 'steal-slime-keys-for-trident!)
#+end_src

** web
#+begin_src emacs-lisp
  (use-package impatient-mode
    :ensure t
    :hook ((clog-mode . impatient-mode)
           (html-mode . impatient-mode)
           (css-mode . impatient-mode)
           (mhtml-mode . impatient-mode)))

  ;; Configure mhtml-mode for .clog files
  (use-package mhtml-mode
    :ensure nil
    :mode ("\\.clog\\'" . mhtml-mode))
#+end_src
#+RESULTS:
: ps-sly-eval-defun

** regex
#+begin_src emacs-lisp
  (use-package ample-regexps
    :ensure t
    :config
    (define-arx guid-rx
                '((hex-char (regexp "[0-9a-fA-F]"))
                  (guid-group4 (seq (= 4 hex-char)))
                  (guid-group8 (seq (= 8 hex-char)))
                  (guid-group12 (seq (= 12 hex-char)))
                  (guid-sep (or "-" ""))  ; Handles both with and without hyphens
                  (guid (seq
                         (or "{" "" "<")  ; Optional opening bracket
                         guid-group8 guid-sep
                         guid-group4 guid-sep
                         guid-group4 guid-sep
                         guid-group4 guid-sep
                         guid-group12
                         (or "}" "" ">"))))))

                                          ; Optional closing bracket

  ;; Examples of how to use it:
  ;; (guid-rx guid)  ; This will create the regexp
#+end_src

** bicep-ts-mode
#+begin_src emacs-lisp
  (use-package bicep-ts-mode
    :config
    (with-eval-after-load 'lsp-mode
      (add-to-list 'lsp-language-id-configuration '(bicep-ts-mode . "bicep"))
      (lsp-register-client
       (make-lsp-client :new-connection (lsp-stdio-connection '("dotnet" "/usr/local/bin/bicep-langserver/Bicep.LangServer.dll"))
                        :activation-fn (lsp-activate-on "bicep")
                        :server-id 'bicep))))
#+end_src

** Marginalia
increases details in the minibuffer for things like files and also
when looking up function
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :init (marginalia-mode))
#+end_src

#+RESULTS:
: [nil 26519 32347 694684 nil elpaca-process-queues nil nil 321000 nil]

** Helpful

additional information when looking up elisp functions
#+begin_src emacs-lisp
  (use-package helpful
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    :bind (([remap describe-function] . #'helpful-callable)
           ([remap describe-variable] . #'helpful-variable)
           ([remap describe-key] . #'helpful-key)
           :map help-map
           ("p" . #'helpful-at-point)))
#+end_src

** prescient
I want emacs to remember what files i have visited as I often will
visit them again. I use vertico for my minibuffer therefore I need the
vertico package of prescient.
#+begin_src emacs-lisp
  (use-package prescient
    :after vertico
    :config
    (setopt prescient-history-length 200)
    (setopt prescient-sort-length-enable t))
#+end_src

#+RESULTS:
: [nil 26519 33959 746874 nil elpaca-process-queues nil nil 880000 nil]

** auth
integrate 1password with emacs auth sources
#+begin_src emacs-lisp
  (use-package auth-source-1password
    :config (auth-source-1password-enable))
#+end_src

** Gptel
#+begin_src emacs-lisp
  (require 'demo-gptel-config)
#+end_src

#+RESULTS:
: [nil 26534 15895 651388 nil elpaca-process-queues nil nil 41000 nil]

** nameless
helps with the inconvience in regards to reading function names of
shared namespaces of emacs

#+begin_src emacs-lisp
    (use-package nameless
      :config
      (add-hook 'emacs-lisp-mode-hook #'nameless-mode))
#+end_src
** eww
#+begin_src emacs-lisp
  (use-package eww
    :ensure nil  ;; eww is built into Emacs, no need to install
    :init
    ;; Settings to apply before loading eww
    (setq eww-search-prefix "https://duckduckgo.com/html/?q=")
    (setq eww-download-directory "~/Downloads/")
    (setq eww-download-filename-function #'eww-download-filename-unique)

    :config
    ;; Visual settings
    (setq shr-inhibit-images nil)         ;; Show images by default
    (setq shr-width 80)                   ;; Readable text width
    (setq shr-color-visible-luminance-min 80)  ;; Better contrast
    (setq shr-use-fonts nil)              ;; Disable font variations for speed
    (setq shr-use-colors nil)             ;; Disable colors for faster rendering

    ;; Table formatting
    (setq shr-table-horizontal-line "─")
    (setq shr-table-vertical-line "│")
    (setq shr-table-corner "┼")

    ;; Advanced settings
    (setq shr-charset-enforcement-fn nil)  ;; Auto-detect character encoding
    (setq shr-external-rendering-functions
          '((pre . eww-tag-pre)
            (script . shr-tag-script)))

    ;; URL and cookie settings
    (setq url-cookie-trusted-urls '(".*"))
    (setq url-user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36")

    :bind (:map eww-mode-map
                ("n" . shr-next-link)
                ("p" . shr-previous-link)
                ("u" . eww-up-url)
                ("o" . eww)
                ("O" . eww-browse-with-external-browser)
                ("C-c C-h" . eww-list-histories)
                ("C-c C-b" . eww-list-bookmarks)
                ("C-c C-a" . eww-add-bookmark))

    :hook (eww-mode . (lambda ()
                        (variable-pitch-mode 1)  ;; Better font for reading
                        (text-scale-increase 1)  ;; Slightly larger text
                        )))
#+end_src

** Azure-devops-org
#+name:az-devops
#+begin_src emacs-lisp :tangle no :noweb yes
    (use-package azure-devops-org
      :ensure nil
      :after promise
      :config
      (setf azure-devops-org-pat (auth-source-pick-first-password :host "azure-work-item-pat"
                                                                  :user "credential")
            azure-devops-org-project "Clever"
            azure-devops-org-organization "cleveras")
      (add-to-list 'azure-devops-org-todo-states "Ready for QA"))

#+end_src

#+RESULTS: az-devops
: cleveras

#+RESULTS:
: cleveras

** debuggin (dap-mode)
#+begin_src emacs-lisp
  (use-package dap-mode
    :ensure t
    :config (require 'dap-netcore))
#+end_src

#+RESULTS:
: [nil 26574 53033 353417 nil elpaca-process-queues nil nil 152000 nil]

** package ~development~
#+begin_src emacs-lisp
  (use-package promise)
  (use-package emacsql)
  (use-package triples)
#+end_src

#+RESULTS:
: [nil 26566 45103 187264 nil elpaca-process-queues nil nil 42000 nil]

* Finans
#+begin_src emacs-lisp
  (use-package ledger-mode
    :mode ("\\.dat\\'"
           "\\.ledger\\'")
    :custom (ledger-clear-whole-transactions t)
    :config
    (defvar ledger-file "/home/karim/Dropbox/ledger/ledger.dat"
      "Path to your main Ledger file.")

    (defun ledger-custom-report (name command)
      "Run a custom Ledger report with NAME and COMMAND."
      (let ((report-name (format "Custom: %s" name)))
        (add-to-list 'ledger-reports `(,report-name ,command) t)
        (ledger-report report-name nil)
        (delete-other-windows)))

    (transient-define-prefix ledger-reports-transient ()
      "Transient for running Ledger reports."
      :transient-suffix 'transient--do-stay
      ["Ledger Reports"
       ("n" "Net Worth" (lambda () (interactive)
                          (ledger-custom-report "Net Worth" "%(binary) -f %(ledger-file) balance ^Assets ^Liabilities ^Equity and not %Equity:Budget -R")))
       ("i" "Income Statement" (lambda () (interactive)
                                 (ledger-custom-report "Income Statement" "%(binary) -f %(ledger-file) balance ^Income ^Expenses -R")))
       ("r" "Retained Earnings" (lambda () (interactive)
                                  (ledger-custom-report "Retained Earnings" "%(binary) -f %(ledger-file) balance ^Income ^Expenses -R --sum")))
       ("b" "Budget Status" (lambda () (interactive)
                              (ledger-custom-report "Budget Status" "%(binary) -f %(ledger-file) balance ^Budget")))
       ("a" "All Accounts" (lambda () (interactive)
                             (ledger-custom-report "All Accounts" "%(binary) -f %(ledger-file) balance ^Assets")))
       ("e" "Expenses" (lambda () (interactive)
                         (ledger-custom-report "Expenses" "%(binary) -f %(ledger-file) balance ^Expenses -R")))
       ("m" "Monthly Expenses" (lambda () (interactive)
                                 (ledger-custom-report "Monthly Expenses" "%(binary) -f %(ledger-file) --monthly balance ^Expenses -R")))])

    (global-set-key (kbd "C-c l") #'ledger-reports-transient)

    (ledger-reports-add "Cash Flow" "ledger -f %(ledger-file) -p %(month) register ^Assets:Checking")
    (ledger-reports-add "Budget vs. Actual" "ledger -f %(ledger-file) -p %(month) --budget --depth 2 balance ^Expenses"))

  (use-package flycheck-ledger :after ledger-mode)
#+end_src

#+RESULTS:
: ledger-reports-transient


* org
#+begin_src emacs-lisp
  (setf org-hide-leading-stars t)
  (setf org-startup-indented t)
  (setf org-pretty-entities t)
  (setf org-agenda-files '("~/org/azure-devops.org"))
#+end_src

#+RESULTS:
: t

* Wrap Up
** Guix Emacs Profile

*.config/guix/manifests/emacs.scm:*

#+begin_src scheme :mkdirp yes :tangle ~/.config/guix/manifests/emacs.scm :noweb yes
  (specifications->manifest
   '("emacs"
     <<packages>>
     ))
#+end_src
** custom elisp
#+begin_src emacs-lisp :noweb yes
  (require 'compare-files)
  (require 'csharp-namespace)
  <<az-devops>>

#+end_src
